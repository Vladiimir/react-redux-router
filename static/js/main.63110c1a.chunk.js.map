{"version":3,"sources":["redux/modules/counter.js","components/Counter/index.js","containers/App/index.js","redux/modules/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["INCREMENT","DECREMENT","initialState","count","getCount","state","Counter","_ref","increment","decrement","react_default","a","createElement","className","type","onClick","defaultProps","connect","dispatch","props","components_Counter","combineReducers","counter","arguments","length","undefined","Store","instance","getStore","this","createStore","reducers","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","es","store","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAAMA,SAAY,iCACZC,EAAY,gCAEZC,EAAe,CACnBC,MAAO,GA8BF,IAAMC,EAAW,SAAAC,GAAK,OAAIA,EAAMF,OC7BjCG,SAAU,SAAAC,GAAA,IAAGJ,EAAHI,EAAGJ,MAAOK,EAAVD,EAAUC,UAAWC,EAArBF,EAAqBE,UAArB,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAIT,GACJO,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,QAASP,GAA/B,YAGAE,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,QAASN,GAA/B,eAMJH,EAAQU,aAAe,CACrBb,MAAO,GASMG,QCHAW,qBATS,SAAAZ,GAAK,MAAK,CAChCF,MAAOC,EAASC,KAGS,SAAAa,GAAQ,MAAK,CACtCV,UAAW,kBAAMU,EFGV,CACLJ,KAAMd,KEHRS,UAAW,kBAAMS,EFQV,CACLJ,KAAMb,OENKgB,CAjBH,SAAAE,GAAK,OACfT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EACKD,sBCNKE,cAAgB,CAC7BC,QHEa,WAAoD,IAAnCjB,EAAmCkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3BrB,EACtC,QADiEqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IAC9CT,MACb,KAAKd,EACH,MAAO,CACLG,MAAOE,EAAMF,MAAQ,GAEzB,KAAKF,EACH,MAAO,CACLE,MAAOE,EAAMF,MAAQ,GAEzB,QACE,OAAOE,MIDEqB,EAZD,CACZC,SAAU,KAEVC,SAHY,WAQV,OAJKC,KAAKF,WACRE,KAAKF,SAAWG,YAAYC,EAAUC,YAAgBC,OAGjDJ,KAAKF,WAIKC,WCLDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAUC,MAAOA,GACfjC,EAAAC,EAAAC,cAACgC,EAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63110c1a.chunk.js","sourcesContent":["const INCREMENT = 'boilerplate/counter/INCREMENT';\nconst DECREMENT = 'boilerplate/counter/DECREMENT';\n\nconst initialState = {\n  count: 0,\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case INCREMENT:\n      return {\n        count: state.count + 1,\n      };\n    case DECREMENT:\n      return {\n        count: state.count - 1,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function increment() {\n  return {\n    type: INCREMENT,\n  };\n}\n\nexport function decrement() {\n  return {\n    type: DECREMENT,\n  };\n}\n\nexport const getCount = state => state.count;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\nconst Counter = ({ count, increment, decrement }) => (\n  <div className=\"counter\">\n    <p>{count}</p>\n    <button type=\"button\" onClick={increment}>\n      Increase\n    </button>\n    <button type=\"button\" onClick={decrement}>\n      Decrease\n    </button>\n  </div>\n);\n\nCounter.defaultProps = {\n  count: 0,\n};\n\nCounter.propTypes = {\n  count: PropTypes.number,\n  increment: PropTypes.func.isRequired,\n  decrement: PropTypes.func.isRequired,\n};\n\nexport default Counter;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { increment, decrement, getCount } from '../../redux/modules/counter';\nimport Counter from '../../components/Counter';\nimport './style.scss';\n\nconst App = props => (\n  <div className=\"App\">\n    <Counter\n      {...props}\n    />\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  count: getCount(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  increment: () => dispatch(increment()),\n  decrement: () => dispatch(decrement()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\n\r\nimport counter from './counter';\r\n\r\nexport default combineReducers({\r\n  counter,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport reducers from './modules/reducer';\r\n\r\nconst Store = {\r\n  instance: null,\r\n\r\n  getStore() {\r\n    if (!this.instance) {\r\n      this.instance = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n    }\r\n\r\n    return this.instance;\r\n  },\r\n};\r\n\r\nexport default Store.getStore();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './containers/App';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}